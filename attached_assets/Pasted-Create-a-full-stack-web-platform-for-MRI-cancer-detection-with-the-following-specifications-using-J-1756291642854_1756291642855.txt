Create a full-stack web platform for MRI cancer detection with the following specifications, using JavaScript and .jsx:
	1.	Frontend:
	•	Use React with Vite bundler.
	•	All HTML should be inside React .jsx components.
	•	Use Tailwind CSS for styling, ensuring a modern, clean, and fully responsive design.
	•	Include well-structured folders under src/:
	•	components/ for reusable components (buttons, forms, cards, status badges)
	•	pages/ for page-level components (UploadPage.jsx, HomePage.jsx, ResultsPage.jsx)
	•	styles/ for CSS/Tailwind imports
	•	Implement an Upload Form component with drag-and-drop and file preview.
	•	Include UI to show upload progress, status badges (Uploaded, Processing, Completed) and a placeholder for results.
	2.	Backend:
	•	Use Node.js with Express.
	•	Structured folders:
	•	routes/ for API routes
	•	controllers/ for route logic
	•	models/ for database schemas
	•	uploads/ for local file storage
	•	services/ for storage helper functions or future ML job queue
	•	Provide REST API endpoints for:
	•	File upload
	•	Checking upload status
	•	Returning results
	•	Include CORS and JSON parsing middleware.
	•	Leave clear hooks/placeholders for ML processing to be added later for cancer detection — do not implement ML yet.
	3.	Database:
	•	Use MongoDB to store metadata about uploads:
	•	filename, path, original name, status, timestamps, optional patient info.
	•	.env file for MongoDB connection string and any secrets.
	4.	General:
	•	Use package.json scripts for frontend and backend (dev, start).
	•	Optionally use concurrently to run both frontend and backend simultaneously.
	•	Ensure the folder structure is clean, scalable, and ready for future ML integration.
	•	The website should look professional, modern, and user-friendly.
	•	Focus on design, layout, responsiveness, proper file structure, and upload flow.
	•	The scaffold should be ready for adding ML training and inference later, so the platform can process MRI images to detect cancer in the future.